name: release code and api

on:
  workflow_call:
    inputs:
      STACK_NAME:
        required: true
        type: string
      ARTIFACT_BUCKET_PREFIX:
        required: true
        type: string
      AWS_ENVIRONMENT:
        required: true
        type: string
      APIGEE_ENVIRONMENT:
        required: true
        type: string
      ENABLE_MUTUAL_TLS:
        required: true
        type: boolean
      BUILD_ARTIFACT:
        required: true
        type: string
      SPEC_ARTIFACT:
        required: true
        type: string
      TRUSTSTORE_FILE:
        required: true
        type: string
      VERSION_NUMBER:
        required: true
        type: string
      COMMIT_ID:
        required: true
        type: string
      # LOG_LEVEL:
      #   required: false
      #   type: string
      #   default: INFO
      LOG_RETENTION_DAYS:
        required: true
        type: string
      # CREATE_INT_RELEASE_NOTES:
      #   type: boolean
      #   default: false
      # CREATE_INT_RC_RELEASE_NOTES:
      #   type: boolean
      #   default: false
      # CREATE_PROD_RELEASE_NOTES:
      #   type: boolean
      #   default: false
      # MARK_JIRA_RELEASED:
      #   type: boolean
      #   default: false
      DEPLOY_APIGEE:
        type: boolean
        default: true
      DOMAIN_NAME_EXPORT:
        required: false
        type: string
      ZONE_ID_EXPORT:
        required: false
        type: string
      TARGET_SPINE_SERVER:
        required: true
        type: string
    secrets:
      CLOUD_FORMATION_DEPLOY_ROLE:
        required: true
      DEV_CLOUD_FORMATION_CHECK_VERSION_ROLE:
        required: false
      INT_CLOUD_FORMATION_CHECK_VERSION_ROLE:
        required: false
      PROD_CLOUD_FORMATION_CHECK_VERSION_ROLE:
        required: false
      DEV_CLOUD_FORMATION_EXECUTE_LAMBDA_ROLE:
        required: false
      PROXYGEN_ROLE:
        required: false

jobs:
  release_code_and_api:
    runs-on: ubuntu-latest
    environment: ${{ inputs.AWS_ENVIRONMENT }}
    permissions:
      id-token: write
      contents: write

    steps:
      - name: Checkout local github actions
        uses: actions/checkout@v4
        with:
          ref: ${{ env.BRANCH_NAME }}
          fetch-depth: 0
          sparse-checkout: |
            .github

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: eu-west-2
          role-to-assume: ${{ secrets.CLOUD_FORMATION_DEPLOY_ROLE }}
          role-session-name: github-actions

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.BUILD_ARTIFACT }}
          path: .

      - name: Download specification artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.SPEC_ARTIFACT }}
          path: .

      - name: Download python dependency artifact
        uses: actions/download-artifact@v4
        with:
          name: python_dependency_files
          path: .
  
      # using git commit sha for version of action to ensure we have stable version
      - name: Install asdf
        uses: asdf-vm/actions/setup@05e0d2ed97b598bfce82fd30daf324ae0c4570e6
        with:
          asdf_branch: v0.11.3
  
      - name: Cache asdf
        uses: actions/cache@v4
        with:
          path: |
            ~/.asdf
          key: ${{ runner.os }}-asdf-${{ hashFiles('**/.tool-versions') }}
          restore-keys: |
            ${{ runner.os }}-asdf-

      - name: Install asdf dependencies in .tool-versions
        uses: asdf-vm/actions/install@05e0d2ed97b598bfce82fd30daf324ae0c4570e6
        with:
          asdf_branch: v0.11.3
        env:
          PYTHON_CONFIGURE_OPTS: --enable-shared

      - name: Run make install-python
        run: |
          make install-python
  
      - name: Export specification paths
        run: |
          SPEC_PATH="$(pwd)/electronic-prescription-service-api.resolved.json"
          echo "EPS FHIR specification location: $SPEC_PATH"
          echo "SPEC_PATH=${SPEC_PATH}" >> "$GITHUB_ENV"

          SPEC_PATH_PRESCRIBING="$(pwd)/fhir-prescribing.resolved.json"
          echo "FHIR Prescribing specification location: $SPEC_PATH_PRESCRIBING"
          echo "SPEC_PATH_PRESCRIBING=${SPEC_PATH_PRESCRIBING}" >> "$GITHUB_ENV"

          SPEC_PATH_DISPENSING="$(pwd)/fhir-dispensing.resolved.json"
          echo "FHIR Dispensing specification location: $SPEC_PATH_DISPENSING"
          echo "SPEC_PATH_DISPENSING=${SPEC_PATH_DISPENSING}" >> "$GITHUB_ENV"

      - name: docker_artifact download
        uses: actions/download-artifact@v4
        with:
          name: docker_artifact
          path: .

      - name: Extract FHIR Facade docker image
        id: extract-FHIR-facade-image
        run: |
          docker load -i FHIR_facade_docker.img

      - name: Extract validator docker image
        id: extract-validator-image
        run: |
          docker load -i validator_docker.img

      - name: Retrieve AWS Account ID
        id: retrieve-account-id
        run: echo "ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)" >> "$GITHUB_ENV"
       
      - name: Login to Amazon ECR
        id: login-ecr
        run: |
          aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin ${{ env.ACCOUNT_ID }}.dkr.ecr.eu-west-2.amazonaws.com

      - name: Push FHIR Facade image to Amazon ECR
        run: |
          docker tag "fhir-facade-repo:${{ inputs.VERSION_NUMBER }}" "${{ env.ACCOUNT_ID }}.dkr.ecr.eu-west-2.amazonaws.com/fhir-facade-repo:${{ inputs.VERSION_NUMBER }}"
          docker push "${{ env.ACCOUNT_ID }}.dkr.ecr.eu-west-2.amazonaws.com/fhir-facade-repo:${{ inputs.VERSION_NUMBER }}"

      - name: Push Validator image to Amazon ECR
        run: |
          docker tag "validator-repo:${{ inputs.VERSION_NUMBER }}" "${{ env.ACCOUNT_ID }}.dkr.ecr.eu-west-2.amazonaws.com/validator-repo:${{ inputs.VERSION_NUMBER }}"
          docker push "${{ env.ACCOUNT_ID }}.dkr.ecr.eu-west-2.amazonaws.com/validator-repo:${{ inputs.VERSION_NUMBER }}"

      - name: Check fhir facade scan results
        env:
          REPOSITORY_NAME: fhir-facade-repo
          IMAGE_TAG: ${{ inputs.VERSION_NUMBER }}
        working-directory: .github/scripts
        run: |
          ./check_ecr_image_scan_results.sh

      - name: Check validator scan results
        env:
          REPOSITORY_NAME: validator-repo
          IMAGE_TAG: ${{ inputs.VERSION_NUMBER }}
        working-directory: .github/scripts
        run: |
          ./check_ecr_image_scan_results.sh

      - name: Release code
        shell: bash
        working-directory: .github/scripts
        env:
          artifact_bucket_prefix: electronic_prescription_service/${{ inputs.ARTIFACT_BUCKET_PREFIX }}
          COMMIT_ID: ${{ inputs.COMMIT_ID }}
          enable_mutual_tls: ${{ inputs.ENABLE_MUTUAL_TLS }}
          # LOG_LEVEL: ${{ inputs.LOG_LEVEL }}
          # LOG_RETENTION_DAYS: ${{ inputs.LOG_RETENTION_DAYS }}
          stack_name: ${{ inputs.STACK_NAME }}
          TARGET_ENVIRONMENT: ${{ inputs.AWS_ENVIRONMENT }}
          template_file: template.yaml
          TRUSTSTORE_FILE: ${{ inputs.TRUSTSTORE_FILE }}
          VERSION_NUMBER: ${{ inputs.VERSION_NUMBER }}
          DOMAIN_NAME_EXPORT: ${{ inputs.DOMAIN_NAME_EXPORT }}
          ZONE_ID_EXPORT: ${{ inputs.ZONE_ID_EXPORT }}
          LOG_RETENTION_DAYS: ${{ inputs.LOG_RETENTION_DAYS }}
          TARGET_SPINE_SERVER: ${{ inputs.TARGET_SPINE_SERVER }}
        run: ./release_code.sh

      - name: Get mtls secrets
        shell: bash
        run: |
          mkdir -p ~/.proxygen/tmp
          client_private_key_arn=$(aws cloudformation list-exports --query "Exports[?Name=='account-resources:FhirFacadeClientKeySecret'].Value" --output text)
          client_cert_arn=$(aws cloudformation list-exports --query "Exports[?Name=='account-resources:FhirFacadeClientCertSecret'].Value" --output text)
          aws secretsmanager get-secret-value --secret-id "${client_private_key_arn}" --query SecretString --output text > ~/.proxygen/tmp/client_private_key
          aws secretsmanager get-secret-value --secret-id "${client_cert_arn}" --query SecretString --output text > ~/.proxygen/tmp/client_cert

      - name: Configure AWS Credentials for API release
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: eu-west-2
          role-to-assume: ${{ secrets.PROXYGEN_ROLE }}
          role-session-name: proxygen-ptl

      - name: Deploy fhir-dispensing API
        shell: bash
        working-directory: .github/scripts
        if: ${{ inputs.DEPLOY_APIGEE == true && always() && !failure() && !cancelled() }}
        env:
          VERSION_NUMBER: ${{ inputs.VERSION_NUMBER }}
          SPEC_PATH: ${{ env.SPEC_PATH_DISPENSING }}
          STACK_NAME: ${{ inputs.STACK_NAME }}
          AWS_ENVIRONMENT: ${{ inputs.AWS_ENVIRONMENT }}
          APIGEE_ENVIRONMENT: ${{ inputs.APIGEE_ENVIRONMENT }}
          PROXYGEN_PRIVATE_KEY_NAME: DispensingProxygenPrivateKey
          PROXYGEN_KID: fhir-dispensing
          DRY_RUN: false
        run: ./deploy_api.sh

      - name: Deploy fhir-prescribing API
        shell: bash
        working-directory: .github/scripts
        if: ${{ inputs.DEPLOY_APIGEE == true && always() && !failure() && !cancelled() }}
        env:
          VERSION_NUMBER: ${{ inputs.VERSION_NUMBER }}
          SPEC_PATH: ${{ env.SPEC_PATH_PRESCRIBING }}
          STACK_NAME: ${{ inputs.STACK_NAME }}
          AWS_ENVIRONMENT: ${{ inputs.AWS_ENVIRONMENT }}
          APIGEE_ENVIRONMENT: ${{ inputs.APIGEE_ENVIRONMENT }}
          PROXYGEN_PRIVATE_KEY_NAME: PrescribingProxygenPrivateKey
          PROXYGEN_KID: fhir-prescribing
          DRY_RUN: false
        run: ./deploy_api.sh
