name: package code and api

on:
  workflow_call:
    inputs:
      APIGEE_ENVIRONMENT:
        required: true
        type: string
      VERSION_NUMBER:
        required: true
        type: string
    secrets:
      API_CLIENT_ID:
        required: true
      API_CLIENT_SECRET:
        required: true
      SIGNING_PRIVATE_KEY:
        required: true
      SIGNING_CERT:
        required: true
jobs:
  run_pact_tests:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      packages: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ env.BRANCH_NAME }}

      # using git commit sha for version of action to ensure we have stable version
      - name: Install asdf
        uses: asdf-vm/actions/setup@05e0d2ed97b598bfce82fd30daf324ae0c4570e6
        with:
          asdf_branch: v0.11.3
  
      - name: Cache asdf
        uses: actions/cache@v4
        with:
          path: |
            ~/.asdf
          key: ${{ runner.os }}-asdf-${{ hashFiles('**/.tool-versions') }}
          restore-keys: |
            ${{ runner.os }}-asdf-

      - name: Install asdf dependencies in .tool-versions
        uses: asdf-vm/actions/install@05e0d2ed97b598bfce82fd30daf324ae0c4570e6
        with:
          asdf_branch: v0.11.3
        env:
          PYTHON_CONFIGURE_OPTS: --enable-shared
      
      - name: Run make install
        run: |
          make install

      - name: Prepare pact
        shell: bash
        run: |
          APIGEE_ACCESS_TOKEN=$(npm run --silent fetch-apigee-access-token --workspace packages/e2e-tests)
          export APIGEE_ACCESS_TOKEN
          if [ -z "$APIGEE_ACCESS_TOKEN" ]
          then
                echo "Could not retrieve APIGEE_ACCESS_TOKEN"
                exit 1
          fi
          mkdir -p .secrets
          echo "${SIGNING_PRIVATE_KEY}" > .secrets/private.key
          echo "${SIGNING_CERT}" > .secrets/cert.crt
          SIGNING_PRIVATE_KEY_PATH=${PWD}/.secrets/private.key
          SIGNING_CERT_PATH=${PWD}/.secrets/cert.crt
          export SIGNING_PRIVATE_KEY_PATH
          export SIGNING_CERT_PATH
          make create-prescribing-pacts
        env:
          SERVICE_ARTIFACT_NAME: electronic-prescription-service-api-prescribing-pacts
          SERVICE_BASE_PATH: fhir-prescribing-${{ inputs.VERSION_NUMBER }}
          APIGEE_ENVIRONMENT: ${{ inputs.APIGEE_ENVIRONMENT }}
          PACT_VERSION: electronic-prescriptions-${{ inputs.VERSION_NUMBER }}
          PACT_PROVIDER_URL: https://internal-dev.api.service.nhs.uk/fhir-prescribing-${{ inputs.VERSION_NUMBER }}
          PACT_CONSUMER: nhsd-apim-eps-test-client
          PACT_PROVIDER: nhsd-apim-eps
          API_CLIENT_ID: ${{ secrets.API_CLIENT_ID }}
          API_CLIENT_SECRET: ${{ secrets.API_CLIENT_SECRET }}
          API_PRODUCT: prescribing
          SIGNING_PRIVATE_KEY: ${{ secrets.SIGNING_PRIVATE_KEY }}
          SIGNING_CERT:  ${{ secrets.SIGNING_CERT }}


      - name: Prepare pact
        shell: bash
        run: |
          make verify-pacts
        env:
          SERVICE_ARTIFACT_NAME: electronic-prescription-service-api-prescribing-pacts
          SERVICE_BASE_PATH: fhir-prescribing-${{ inputs.VERSION_NUMBER }}
          APIGEE_ENVIRONMENT: ${{ inputs.APIGEE_ENVIRONMENT }}
          PACT_VERSION: electronic-prescriptions-${{ inputs.VERSION_NUMBER }}
          PACT_PROVIDER_URL: https://internal-dev.api.service.nhs.uk/fhir-prescribing-${{ inputs.VERSION_NUMBER }}
          PACT_CONSUMER: eps-test-client
          PACT_PROVIDER: eps
          API_CLIENT_ID: ${{ secrets.API_CLIENT_ID }}
          API_CLIENT_SECRET: ${{ secrets.API_CLIENT_SECRET }}
          API_PRODUCT: prescribing
          SIGNING_PRIVATE_KEY: ${{ secrets.SIGNING_PRIVATE_KEY }}
          SIGNING_CERT:  ${{ secrets.SIGNING_CERT }}
