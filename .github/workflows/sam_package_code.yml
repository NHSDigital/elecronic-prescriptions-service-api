name: sam package code

on:
  workflow_call:
    inputs:
      VERSION_NUMBER:
        required: true
        type: string
      COMMIT_ID:
        required: true
        type: string

jobs:
  sam_package_code:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      packages: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ env.BRANCH_NAME }}

      # using git commit sha for version of action to ensure we have stable version
      - name: Install asdf
        uses: asdf-vm/actions/setup@05e0d2ed97b598bfce82fd30daf324ae0c4570e6
        with:
          asdf_branch: v0.11.3
  
      - name: Cache asdf
        uses: actions/cache@v4
        with:
          path: |
            ~/.asdf
          key: ${{ runner.os }}-asdf-${{ hashFiles('**/.tool-versions') }}
          restore-keys: |
            ${{ runner.os }}-asdf-

      - name: Install asdf dependencies in .tool-versions
        uses: asdf-vm/actions/install@05e0d2ed97b598bfce82fd30daf324ae0c4570e6
        with:
          asdf_branch: v0.11.3
        env:
          PYTHON_CONFIGURE_OPTS: --enable-shared
      
      - name: Run make install
        run: |
          make install-api

      - name: Package code
        shell: bash
        run: |
          cp .tool-versions ~/
          rm -rf .aws-sam
          export PATH=$PATH:$PWD/node_modules/.bin
          make build-api
          make sam-build
          cp Makefile .aws-sam/build/
          cp samconfig_package_and_deploy.toml .aws-sam/build/
          mkdir -p .aws-sam/build/specification
          cp packages/specification/dist/electronic-prescription-service-api.resolved.json .aws-sam/build/specification/
      
      # Readme is included to stop the action flattening the folder structure of aws-sam/build when it is the only item to upload
      - uses: actions/upload-artifact@v4
        name: Upload build artifact
        with:
          name: packaged_code
          path: |
            .aws-sam/build
            README.md
      
      - uses: actions/upload-artifact@v4
        name: Upload specification artifact
        with:
          name: specification_code
          path: |
            .aws-sam/build/specification
      
      - uses: actions/upload-artifact@v4
        name: Upload python dependency files
        with:
          name: python_dependency_files
          path: |
            .tool-versions
            poetry.lock
            poetry.toml
            pyproject.toml
      
      - name: Package sandbox
        shell: bash
        run: |
          cp .tool-versions ~/
          rm -rf .aws-sam
          export PATH=$PATH:$PWD/node_modules/.bin
          make sam-build-sandbox
          cp Makefile .aws-sam/build/
          cp samconfig_package_and_deploy.toml .aws-sam/build/
      
      # Readme is included to stop the action flattening the folder structure of aws-sam/build when it is the only item to upload
      - uses: actions/upload-artifact@v4
        name: Upload sandbox build artifact
        with:
          name: packaged_sandbox_code
          path: |
            .aws-sam/build
            README.md

      - name: Set FHIR FACADE ECR Repository
        run: echo "FHIR_FACADE_ECR_REPOSITORY=fhir-facade-repo" >> "$GITHUB_ENV"

      - name: Set FHIR FACADE Image Tag
        run: echo "FHIR_FACADE_IMAGE_TAG=${{ inputs.VERSION_NUMBER }}" >> "$GITHUB_ENV"

      - name: Build FHIR Facade Docker image
        id: build-fhir-facade-image
        run: |
           docker build -t "${{ env.FHIR_FACADE_ECR_REPOSITORY }}:${{ env.FHIR_FACADE_IMAGE_TAG }}" -f packages/coordinator/Dockerfile .

      # - name: Print inputs version
      #   run: echo "latest version - ${{ inputs.VERSION_NUMBER }}"

      # - name: Construct and print the Dockerfile URL
      #   run: echo "URL - https://github.com/NHSDigital/validation-service-fhir-r4/releases/download/v${{ inputs.VERSION_NUMBER }}/Dockerfile"

      - name: get latest release
        id: get_latest_release
        run: |
          LATEST_VERSION=$(curl -s "https://api.github.com/repos/NHSDigital/validation-service-fhir-r4/releases/latest" | jq -r .tag_name)
          echo "LATEST_VERSION=${LATEST_VERSION}" >> "$GITHUB_ENV"

      - name: Download Dockerfile, manifest.json and JAR file for Validator
        run: |
          curl -L -o Dockerfile "https://github.com/NHSDigital/validation-service-fhir-r4/releases/download/${{ env.LATEST_VERSION }}/Dockerfile"
          curl -L -o manifest.json "https://github.com/NHSDigital/validation-service-fhir-r4/releases/download/${{ env.LATEST_VERSION }}/manifest.json"
          curl -L -o validator.jar "https://github.com/NHSDigitavalidation-service-fhir-r4/releases/download/${{ env.LATEST_VERSION }}/fhir-validator.jar"

      - name: Print latest version
        run: echo "latest version - ${{ env.LATEST_VERSION }}"     

      - name: Display downloaded Dockerfile
        run: |
          cat Dockerfile    
          cat manifest.json

      - name: List files in the current directory
        run: ls -la

      - name: Set Validator ECR Repository
        run: echo "VALIDATOR_ECR_REPOSITORY"="validator-repo" >> "$GITHUB_ENV"

      - name: Set Validator Image Tag
        run: echo "VALIDATOR_IMAGE_TAG=${{ inputs.VERSION_NUMBER }}" >> "$GITHUB_ENV" 

      - name: Build Validator Docker image
        id: build-validator-image
        run: |
           docker build -t "${{ env.VALIDATOR_ECR_REPOSITORY }}:${{ env.VALIDATOR_IMAGE_TAG }}" -f Dockerfile .
           docker images
           docker save "${{ env.VALIDATOR_ECR_REPOSITORY }}:${{ env.VALIDATOR_IMAGE_TAG }}" -o validator_docker.img   
    
      - uses: actions/upload-artifact@v4
        name: Upload docker images
        with:
          name: docker_artifact
          path: |
            FHIR_facade_docker.img
            validator_docker.img
            

      ##check current azure pipelines

##### CHECK IF DOCKERFILE USED IN LINE 156 IS THE CORRECT ONE TO BE USED
