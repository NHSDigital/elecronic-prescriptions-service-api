name: sam package code

on:
  workflow_call:

jobs:
  sam_package_code:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      packages: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ env.BRANCH_NAME }}

      # using git commit sha for version of action to ensure we have stable version
      - name: Install asdf
        uses: asdf-vm/actions/setup@05e0d2ed97b598bfce82fd30daf324ae0c4570e6
        with:
          asdf_branch: v0.11.3
  
      - name: Cache asdf
        uses: actions/cache@v4
        with:
          path: |
            ~/.asdf
          key: ${{ runner.os }}-asdf-${{ hashFiles('**/.tool-versions') }}
          restore-keys: |
            ${{ runner.os }}-asdf-

      - name: Install asdf dependencies in .tool-versions
        uses: asdf-vm/actions/install@05e0d2ed97b598bfce82fd30daf324ae0c4570e6
        with:
          asdf_branch: v0.11.3
        env:
          PYTHON_CONFIGURE_OPTS: --enable-shared
      
      - name: Run make install
        run: |
          make install-api

      - name: Package code
        shell: bash
        run: |
          cp .tool-versions ~/
          rm -rf .aws-sam
          export PATH=$PATH:$PWD/node_modules/.bin
          make build-api
          make sam-build
          cp Makefile .aws-sam/build/
          cp samconfig_package_and_deploy.toml .aws-sam/build/
          mkdir -p .aws-sam/build/specification
          cp packages/specification/dist/electronic-prescription-service-api.resolved.json .aws-sam/build/specification/
      
      # Readme is included to stop the action flattening the folder structure of aws-sam/build when it is the only item to upload
      - uses: actions/upload-artifact@v4
        name: Upload build artifact
        with:
          name: packaged_code
          path: |
            .aws-sam/build
            README.md
      
      - uses: actions/upload-artifact@v4
        name: Upload specification artifact
        with:
          name: specification_code
          path: |
            .aws-sam/build/specification
      
      - uses: actions/upload-artifact@v4
        name: Upload python dependency files
        with:
          name: python_dependency_files
          path: |
            .tool-versions
            poetry.lock
            poetry.toml
            pyproject.toml
      
      - name: Package sandbox
        shell: bash
        run: |
          cp .tool-versions ~/
          rm -rf .aws-sam
          export PATH=$PATH:$PWD/node_modules/.bin
          make sam-build-sandbox
          cp Makefile .aws-sam/build/
          cp samconfig_package_and_deploy.toml .aws-sam/build/
      
      # Readme is included to stop the action flattening the folder structure of aws-sam/build when it is the only item to upload
      - uses: actions/upload-artifact@v4
        name: Upload sandbox build artifact
        with:
          name: packaged_sandbox_code
          path: |
            .aws-sam/build
            README.md

###have a for loop here for setting repo names and tags
###then on step below, append name to start of ecr.repositry step.
###i.e env.${{validator}}_repository
      # - name: Set ECR Repository and Image Tag
      #   run: |
      #     echo "ECR_REPOSITORY=fhir-facade-repo" >> "$GITHUB_ENV"
      #     echo "IMAGE_TAG=latest" >> "$GITHUB_ENV"

      - name: Determine Repositories and Image Tags
        id: determine-tags
        run: |
          REPOSITORIES=("fhir-facade-repo" "validator-repo")
          for REPO in "${REPOSITORIES[@]}"; do
            if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              IMAGE_TAG="PR-${{ github.event.pull_request.number }}"
            elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
              VERSION=$(cat VERSION)
              SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
              IMAGE_TAG="${SHORT_SHA}-${VERSION}"
            else
              IMAGE_TAG="latest"
            fi
            echo "${REPO^^}_ECR_REPOSITORY=${REPO}" >> "$GITHUB_ENV"
            echo "${REPO^^}_IMAGE_TAG=${IMAGE_TAG}" >> "$GITHUB_ENV"
          done

      - name: Print environment variables for debugging
        run: |
          echo "ACCOUNT_ID=${{ env.ACCOUNT_ID }}"
          echo "FHIR_FACADE_ECR_REPOSITORY=${{ env.FHIR_FACADE_REPO_ECR_REPOSITORY }}"
          echo "FHIR_FACADE_IMAGE_TAG=${{ env.FHIR_FACADE_REPO_IMAGE_TAG }}"
          echo "VALIDATOR_ECR_REPOSITORY=${{ env.VALIDATOR_REPO_ECR_REPOSITORY }}"
          echo "VALIDATOR_IMAGE_TAG=${{ env.VALIDATOR_REPO_IMAGE_TAG }}"

      # - name: Build Docker image
      #   id: build-image
      #   run: |
      #      docker build -t "${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}" -f packages/coordinator/Dockerfile .
      #      docker save "${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}" -o docker.img
      - name: Build and Push Docker images
        run: |
          REPOSITORIES=("fhir-facade-repo" "validator-repo")
          for REPO in "${REPOSITORIES[@]}"; do
            IMAGE_TAG_ENV_VAR="${REPO^^}_IMAGE_TAG" 
            IMAGE_TAG="${!IMAGE_TAG_ENV_VAR}"
            REPO_ENV_VAR="${REPO^^}_ECR_REPOSITORY"
            REPO_NAME="${!REPO_ENV_VAR}"
            echo "Building and pushing ${REPO_NAME}:${IMAGE_TAG}"
            docker build -t "${{ env.ACCOUNT_ID }}.dkr.ecr.${{ env.ECR_REGION }}.amazonaws.com/${REPO_NAME}:${IMAGE_TAG}" -f "packages/${REPO}/Dockerfile" .
            docker push "${{ env.ACCOUNT_ID }}.dkr.ecr.${{ env.ECR_REGION }}.amazonaws.com/${REPO_NAME}:${IMAGE_TAG}"
          done
    
      - uses: actions/upload-artifact@v4
        name: Upload docker image
        with:
          name: docker_artifact
          path: |
            docker.img
            README.md
