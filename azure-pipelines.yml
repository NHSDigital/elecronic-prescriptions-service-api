name: "$(SourceBranchName)+$(BuildID)"

variables:
- group: pact

resources:
  repositories:
    - repository: utils
      name: NHSDigital/api-management-utils
      endpoint: NHSDigital
      type: github

trigger:
  branches:
    include:
      - master

pr:
  branches:
    include: ['*']

jobs:
  - job: build
    displayName: Build & Test
    timeoutInMinutes: "10"
    pool:
      vmImage: 'ubuntu-latest'
    variables:
      PIP_CACHE_DIR: ".poetry"
    steps:
      - checkout: self
        path: s
        fetchDepth: "0"

      - bash: echo "##vso[task.setvariable variable=BRANCH_NAME]`echo $(System.PullRequest.SourceBranch) | sed -r 's/[/|\\@":<>?*]+/-/g'`"
        displayName: Set and replace invalid characters in branch name

      - bash: 'echo "##vso[build.updatebuildnumber]$(BRANCH_NAME)+$(Build.BuildID)"'
        condition: eq(variables['Build.SourceBranchName'], 'merge')
        displayName: Update build ID if this is a pull request

      - task: UsePythonVersion@0
        displayName: "Use Python 3.8"
        inputs:
          versionSpec: "3.8"

      - bash: "sudo apt update && sudo apt-get install --yes default-jre default-jdk"
        displayName: Install apt dependencies

      - bash: "wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -; curl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash -; sudo apt-get install -y nodejs"
        displayName: Install node

      - bash: "python -m pip install --upgrade pip setuptools wheel && pip install poetry"
        displayName: Install python dependencies

      - bash: "make install"
        displayName: Install repo

      - bash: echo "##vso[task.setvariable variable=RELEASE_VERSION]`echo $(poetry run python scripts/calculate_version.py)`"
        condition: eq(variables['Build.SourceBranchName'], 'master')
        displayName: Calculate Release Version

      - bash: echo "##vso[task.setvariable variable=RELEASE_VERSION]`echo $(git describe --tags --abbrev=0)`"
        condition: ne(variables['Build.SourceBranchName'], 'master')
        displayName: Get Previous Released Version

      - bash: |
          echo $sourceVersion
          commitShortHash=-${sourceVersion:0:7}
          echo $commitHash
          echo "##vso[task.setvariable variable=SHORT_COMMIT_HASH]$commitShortHash"
        condition: ne(variables['Build.SourceBranchName'], 'master')
        env: { sourceVersion: $(Build.SourceVersion) }
        displayName: Calculate Short Commit Hash

      - task: GitHubRelease@0
        condition: eq(variables['Build.SourceBranchName'], 'master')
        displayName: 'Draft GitHub Release'
        inputs:
          gitHubConnection: booshibooshi
          repositoryName: NHSDigital/electronic-prescription-service-api
          action: create
          target: $(Build.SourceVersion)
          tagSource: manual
          tag: $(RELEASE_VERSION)
          isDraft: true
          addChangeLog: false
            

      - checkout: utils
        path: s/utils

      - bash: "curl https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip -o awscliv2.zip && unzip awscliv2.zip && sudo ./aws/install"
        displayName: Install AWS CLI

      - bash: "make build"
        displayName: Build

      - bash: "make test"
        displayName: Run Quality Checks

      - bash: 'echo "##vso[task.setvariable variable=SPEC_VERSION]$RELEASE_VERSION"'
        displayName: Set SPEC_VERSION

      - task: PublishTestResults@2
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: 'coordinator/newman/*.xml'
          failTaskOnFailedTests: true

      - bash: "make release"
        displayName: Build Release Package

      - bash: "cp ecs-proxies-deploy.yml dist/ecs-deploy-all.yml"
        displayName: Copy ECS deployment config

      - template: az/build-prereqs.yml@utils

      - template: az/create-build-env-vars.yml@utils
        parameters:
            out_dir: 'dist'
            service_name: 'eps-coordinator'

      - template: az/become-build-user.yml@utils
        parameters:
            env_vars_dir: 'dist'

      - template: az/build-and-push-ecs-proxies.yml@utils
        parameters:
            env_vars_dir: 'dist'

      - bash: "scripts/populate_ssm_parameters.sh"
        displayName: Copy secrets from secrets manager to SSM

      - publish: dist/
        artifact: electronic-prescription-service-$(SPEC_VERSION)+$(Build.BuildNumber)
