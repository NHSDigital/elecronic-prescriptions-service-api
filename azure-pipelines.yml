name: "$(SourceBranchName)+$(BuildID)"

resources:
  repositories:
    - repository: utils
      name: NHSDigital/api-management-utils
      endpoint: NHSDigital
      type: github

trigger:
  branches:
    include:
      - tags/refs/v*
  tags:
    include:
      - v*

pr:
  branches:
    include: ['*']

jobs:
  - job: build
    displayName: Build & Test
    timeoutInMinutes: 10
    pool:
      vmImage: 'ubuntu-latest'
    variables:
      PIP_CACHE_DIR: ".poetry"
    steps:
      - checkout: self
        path: s

      - checkout: utils
        path: s/utils

      - bash: echo "##vso[task.setvariable variable=BRANCH_NAME]`echo $(System.PullRequest.SourceBranch) | sed -r 's/[/|\\@":<>?*]+/-/g'`"
        displayName: Set and replace invalid characters in branch name

      - bash: 'echo "##vso[build.updatebuildnumber]$(BRANCH_NAME)+$(Build.BuildID)"'
        condition: eq(variables['Build.SourceBranchName'], 'merge')
        displayName: Update build ID if this is a pull request

      - task: UsePythonVersion@0
        displayName: "Use Python 3.8"
        inputs:
          versionSpec: "3.8"

      - bash: "sudo apt update && sudo apt-get install --yes default-jre default-jdk"
        displayName: Install apt dependencies

      - bash: "wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -; curl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash -; sudo apt-get install -y nodejs"
        displayName: Install node

      - bash: "python -m pip install --upgrade pip setuptools wheel && pip install poetry"
        displayName: Install python dependencies

      - bash: "curl https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip -o awscliv2.zip && unzip awscliv2.zip && sudo ./aws/install"
        displayName: Install AWS CLI

      - task: Cache@2
        displayName: "Cache Python Dependencies"
        inputs:
          key: '"$(Agent.OS)" | "python" | poetry.lock'
          path: ".poetry"
          restoreKeys: |
            "$(Agent.OS)" | "python" | poetry.lock
            "$(Agent.OS)" | "pythons"

      - task: Cache@2
        displayName: "Cache Specification NPM Dependencies"
        inputs:
          key: '"$(Agent.OS)" | "node" | specification/package-lock.json'
          path: "specification/node_modules"
          restoreKeys: |
            "$(Agent.OS)" | "node-specification" | specification/package-lock.json
            "$(Agent.OS)" | "node-specification"

      - task: Cache@2
        displayName: "Cache Coordinator NPM Dependencies"
        inputs:
          key: '"$(Agent.OS)" | "node-coordinator" | coordinator/package-lock.json'
          path: "coordinator/node_modules"
          restoreKeys: |
            "$(Agent.OS)" | "node-coordinator" | coordinator/package-lock.json
            "$(Agent.OS)" | "node-coordinator"

      - bash: "make install"
        displayName: Install repo

      - bash: "make build"
        displayName: Build

      - bash: "make run-coordinator &"
        displayName: Start Coordinator

      - bash: "make test"
        displayName: Run Quality Checks

      - bash: 'echo "##vso[task.setvariable variable=SPEC_VERSION]$(poetry run python scripts/calculate_version.py)"'
        displayName: Set SPEC_VERSION

      - bash: "make test-integration-coordinator"
        displayName: Run Coordinator Integration Tests

      - task: PublishTestResults@2
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: 'newman/*.xml'
          failTaskOnFailedTests: true

      - bash: "make release"
        displayName: Build Release Package

      - bash: "cp ecs-proxies-deploy.yml dist/ecs-deploy-all.yml"
        displayName: Copy ECS deployment config

      - template: az/build-prereqs.yml@utils

      - template: az/create-build-env-vars.yml@utils
        parameters:
            out_dir: 'dist'
            service_name: 'eps-coordinator'

      - template: az/become-build-user.yml@utils
        parameters:
            env_vars_dir: 'dist'

      - template: az/build-and-push-ecs-proxies.yml@utils
        parameters:
            env_vars_dir: 'dist'

      - bash: "scripts/copy_secrets_to_ssm.sh"
        displayName: Copy secrets from secrets manager to SSM

      - publish: dist/
        artifact: electronic-prescription-service-$(SPEC_VERSION)+$(Build.BuildNumber)
