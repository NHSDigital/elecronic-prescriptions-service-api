steps:
  - bash: |
      cd $(Pipeline.Workspace)/s/
      if [ "$(APIGEE_ENVIRONMENT)" == "prod" ]
      then
        echo "##vso[task.setvariable variable=run_smoke_tests]false"
      elif [[ -d "$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)/packages/e2e-tests" ]]
      then
        echo "$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)/packages/e2e-tests directory found."
        echo "Setting run_smoke_tests to true"
        echo "##vso[task.setvariable variable=run_smoke_tests]true"
      else
        echo "$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)/packages/e2e-tests directory not found."
        echo "Run new pipeline."
        echo "##vso[task.complete result=Failed;]"
      fi
    displayName: Check for smoke tests
  - task: NodeTool@0
    displayName: Use Node v20.10.x
    inputs:
      versionSpec: "20.10.0"
    condition: and(succeeded(), eq(variables['run_smoke_tests'], 'true'))
  - bash: |
      #!/bin/bash

      set -euo pipefail

      export SERVICE_ARTIFACT_NAME=$(SERVICE_ARTIFACT_NAME)
      export SERVICE_BASE_PATH=$(SERVICE_BASE_PATH)
      export APIGEE_ENVIRONMENT=$(APIGEE_ENVIRONMENT)

      # Poll deploying API until our deployed version matches the release version
      if [ "$APIGEE_ENVIRONMENT" != "prod" ]; then
          envPrefix="$APIGEE_ENVIRONMENT."
      fi;
      url="https://${envPrefix}api.service.nhs.uk/$SERVICE_BASE_PATH/_status"
      interval_in_seconds=5
      releaseCommit="$(Build.SourceVersion)"
      printf "\nPolling %s every %s seconds, until commit is: %s\n" "$url" "$interval_in_seconds" "$releaseCommit"
      attempts=0
      success=0
      until [ $attempts -eq 60 ]
      do
      echo "attempt: ${attempts}"
      responseData=$(curl -H "apiKey: $(status-endpoint-api-key)" "$url" -s)
      deployedCommit=$(echo "$responseData" | jq -r ".commitId" || echo "not_found")
      dependenciesUp=$(echo "$responseData" | jq -r ".status" || echo "not_found")
      if [ "$deployedCommit" == "$releaseCommit" ] && [ "$dependenciesUp" == "pass" ]; then
          success=1
          break;
      fi;
      ((attempts=attempts+1))
      echo "sleeping ${interval_in_seconds} seconds"
      sleep $interval_in_seconds;
      done

      if [ $success == 0 ]
      then
          echo "Smoke tests failed, API was not ready in time"
          exit 255
      fi
    displayName: Wait for API deploy
    condition: and(succeeded(), eq(variables['run_smoke_tests'], 'true'))
    workingDirectory: "$(Pipeline.Workspace)/s/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)"
  - bash: |
      #!/bin/bash

      set -euo pipefail
      export SERVICE_ARTIFACT_NAME=$(SERVICE_ARTIFACT_NAME)
      export SERVICE_BASE_PATH=$(SERVICE_BASE_PATH)
      export APIGEE_ENVIRONMENT=$(APIGEE_ENVIRONMENT)
      export PACT_PROVIDER_URL=https://$APIGEE_ENVIRONMENT.api.service.nhs.uk/$SERVICE_BASE_PATH

      if [[ $SERVICE_ARTIFACT_NAME == v* ]]; then
          PACT_VERSION=$STAGE_NAME
          export PACT_VERSION
      else
          export PACT_VERSION="$SERVICE_BASE_PATH"
      fi


      # Install dependencies for Pact tests
      echo "Installing npm packages..."
      rm -rf node_modules && npm ci --workspaces --if-present --include-workspace-root > /dev/null

      if [[ "$APIGEE_ENVIRONMENT" == *"sandbox"* ]]; then
          export PACT_CONSUMER=nhsd-apim-eps-test-client-sandbox
          export PACT_PROVIDER=nhsd-apim-eps-sandbox

          echo "##vso[task.setvariable variable=SIGNING_PRIVATE_KEY_PATH]''"
          echo "##vso[task.setvariable variable=SIGNING_CERT_PATH]''"
          echo "##vso[task.setvariable variable=API_CLIENT_ID]''"
          echo "##vso[task.setvariable variable=API_CLIENT_SECRET]''"
          echo "##vso[task.setvariable variable=APIGEE_ACCESS_TOKEN]''"

      else
          export PACT_CONSUMER=nhsd-apim-eps-test-client
          export PACT_PROVIDER=nhsd-apim-eps

          export SIGNING_PRIVATE_KEY_PATH=$(Pipeline.Workspace)/secrets/$(eps_int_test_private.key)
          export SIGNING_CERT_PATH=$(Pipeline.Workspace)/secrets/$(eps_int_test_certificate.crt)

          if [[ "$APIGEE_ENVIRONMENT" == *"internal-dev"* ]]; then
            API_CLIENT_ID=$(INTERNAL_DEV_CLIENT_ID)
            API_CLIENT_SECRET=$(INTERNAL_DEV_CLIENT_SECRET)
          elif [[ "$APIGEE_ENVIRONMENT" == *"internal-qa"* ]]; then
            API_CLIENT_ID=$(INTERNAL_QA_CLIENT_ID)
            API_CLIENT_SECRET=$(INTERNAL_QA_CLIENT_SECRET)
          elif [[ "$APIGEE_ENVIRONMENT" == *"int"* ]]; then
            API_CLIENT_ID=$(INT_CLIENT_ID)
            API_CLIENT_SECRET=$(INT_CLIENT_SECRET)
          elif [[ "$APIGEE_ENVIRONMENT" == *"ref"* ]]; then
            API_CLIENT_ID=$(REF_CLIENT_ID)
            API_CLIENT_SECRET=$(REF_CLIENT_SECRET)
          fi

          export API_CLIENT_ID
          export API_CLIENT_SECRET

          echo "Fetching Apigee access token..."
          export APIGEE_ACCESS_TOKEN=$(npm run --silent fetch-apigee-access-token --workspace packages/e2e-tests)
          if [ -z "$APIGEE_ACCESS_TOKEN" ]
          then
                echo "Could not retrieve APIGEE_ACCESS_TOKEN"
                exit 1
          fi
          echo "##vso[task.setvariable variable=SIGNING_PRIVATE_KEY_PATH]$SIGNING_PRIVATE_KEY_PATH"
          echo "##vso[task.setvariable variable=SIGNING_CERT_PATH]$SIGNING_CERT_PATH"
          echo "##vso[task.setvariable variable=API_CLIENT_ID]$API_CLIENT_ID"
          echo "##vso[task.setvariable variable=API_CLIENT_SECRET]$API_CLIENT_SECRET"
          echo "##vso[task.setvariable variable=APIGEE_ACCESS_TOKEN]$APIGEE_ACCESS_TOKEN"
      fi
      echo "##vso[task.setvariable variable=PACT_VERSION]$PACT_VERSION"
      echo "##vso[task.setvariable variable=PACT_PROVIDER_URL]$PACT_PROVIDER_URL"
      echo "##vso[task.setvariable variable=PACT_CONSUMER]$PACT_CONSUMER"
      echo "##vso[task.setvariable variable=PACT_PROVIDER]$PACT_PROVIDER"
    displayName: Set PACT variables and install node dependencies
    name: setPactVariables
    condition: and(succeeded(), eq(variables['run_smoke_tests'], 'true'))
    workingDirectory: "$(Pipeline.Workspace)/s/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)"
  - bash: |
      #!/bin/bash

      set -euo pipefail

      export SERVICE_ARTIFACT_NAME=$(SERVICE_ARTIFACT_NAME)
      export SERVICE_BASE_PATH=$(SERVICE_BASE_PATH)
      export APIGEE_ENVIRONMENT=$(APIGEE_ENVIRONMENT)
      export PACT_VERSION=$(PACT_VERSION)
      export PACT_PROVIDER_URL=$(PACT_PROVIDER_URL)
      export PACT_CONSUMER=$(PACT_CONSUMER)
      export PACT_PROVIDER=$(PACT_PROVIDER)
      export SIGNING_PRIVATE_KEY_PATH=$(SIGNING_PRIVATE_KEY_PATH)
      export SIGNING_CERT_PATH=$(SIGNING_CERT_PATH)
      export API_CLIENT_ID=$(API_CLIENT_ID)
      export API_CLIENT_SECRET=$(API_CLIENT_SECRET)
      export APIGEE_ACCESS_TOKEN=$(APIGEE_ACCESS_TOKEN)
      export eps_int_test_certificate_file=$(eps_int_test_certificate.crt)
      export eps_int_test_private_file=$(eps_int_test_private.key)

      echo "SERVICE_ARTIFACT_NAME: ${SERVICE_ARTIFACT_NAME}"
      echo "SERVICE_BASE_PATH: ${SERVICE_BASE_PATH}"
      echo "APIGEE_ENVIRONMENT: ${APIGEE_ENVIRONMENT}"
      echo "PACT_VERSION: ${PACT_VERSION}"
      echo "PACT_PROVIDER_URL: ${PACT_PROVIDER_URL}"
      echo "PACT_CONSUMER: ${PACT_CONSUMER}"
      echo "PACT_PROVIDER: ${PACT_PROVIDER}"
      echo "SIGNING_PRIVATE_KEY_PATH: ${SIGNING_PRIVATE_KEY_PATH}"
      echo "SIGNING_CERT_PATH: ${SIGNING_CERT_PATH}"
      echo "API_CLIENT_ID: HIDDEN"
      echo "API_CLIENT_SECRET: HIDDEN"
      echo "APIGEE_ACCESS_TOKEN: HIDDEN"

    displayName: Show PACT variables
    name: showPactVariables
    workingDirectory: "$(Pipeline.Workspace)/s/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)"
  - bash: |
      #!/bin/bash

      set -euo pipefail

      export SERVICE_ARTIFACT_NAME=$(SERVICE_ARTIFACT_NAME)
      export SERVICE_BASE_PATH=$(SERVICE_BASE_PATH)
      export APIGEE_ENVIRONMENT=$(APIGEE_ENVIRONMENT)
      export PACT_VERSION=$(PACT_VERSION)
      export PACT_PROVIDER_URL=$(PACT_PROVIDER_URL)
      export PACT_CONSUMER=$(PACT_CONSUMER)
      export PACT_PROVIDER=$(PACT_PROVIDER)
      export SIGNING_PRIVATE_KEY_PATH=$(SIGNING_PRIVATE_KEY_PATH)
      export SIGNING_CERT_PATH=$(SIGNING_CERT_PATH)
      export API_CLIENT_ID=$(API_CLIENT_ID)
      export API_CLIENT_SECRET=$(API_CLIENT_SECRET)
      export APIGEE_ACCESS_TOKEN=$(APIGEE_ACCESS_TOKEN)

      cd packages/e2e-tests

      make create-pacts > /dev/null
    displayName: Create PACT tests
    condition: and(succeeded(), eq(variables['run_smoke_tests'], 'true'))
    workingDirectory: "$(Pipeline.Workspace)/s/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)"
  - bash: |
      #!/bin/bash

      set -euo pipefail

      export SERVICE_ARTIFACT_NAME=$(SERVICE_ARTIFACT_NAME)
      export SERVICE_BASE_PATH=$(SERVICE_BASE_PATH)
      export APIGEE_ENVIRONMENT=$(APIGEE_ENVIRONMENT)
      export PACT_VERSION=$(PACT_VERSION)
      export PACT_PROVIDER_URL=$(PACT_PROVIDER_URL)
      export PACT_CONSUMER=$(PACT_CONSUMER)
      export PACT_PROVIDER=$(PACT_PROVIDER)
      export SIGNING_PRIVATE_KEY_PATH=$(SIGNING_PRIVATE_KEY_PATH)
      export SIGNING_CERT_PATH=$(SIGNING_CERT_PATH)
      export API_CLIENT_ID=$(API_CLIENT_ID)
      export API_CLIENT_SECRET=$(API_CLIENT_SECRET)
      export APIGEE_ACCESS_TOKEN=$(APIGEE_ACCESS_TOKEN)

      cd packages/e2e-tests

      # Verify
      chmod +x ./broker/verify.ts
      make verify-pacts
    displayName: Run PACT tests
    condition: and(succeeded(), eq(variables['run_smoke_tests'], 'true'))
    workingDirectory: "$(Pipeline.Workspace)/s/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)"
  - task: PublishBuildArtifacts@1
    displayName: "Publish Pact Tests"
    inputs:
      pathToPublish: "$(Pipeline.Workspace)/s/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)/packages/e2e-tests/pact"
      artifactName: "pact_tests"
      publishLocation: "Container"
    condition: eq(variables['run_smoke_tests'], 'true')
  - task: PublishBuildArtifacts@1
    displayName: "Publish Test Prescriptions"
    inputs:
      pathToPublish: "$(Pipeline.Workspace)/s/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)/packages/e2e-tests/prescriptions-$(APIGEE_ENVIRONMENT).txt"
      artifactName: "smoke-tests"
      publishLocation: "Container"
    condition: eq(variables['run_smoke_tests'], 'true')
  - task: PublishTestResults@2
    displayName: "Publish Test Results"
    inputs:
      testResultsFormat: "JUnit"
      testResultsFiles: "**/junit.xml"
      searchFolder: "${{ variables.service_name }}"
      mergeTestResults: true
      testRunTitle: "EPS Tests"
      failTaskOnFailedTests: true
  - task: 6d15af64-176c-496d-b583-fd2ae21d4df4@1
    inputs:
      repository: self
      path: "$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)/electronic-prescription-service-api"
      submodules: true
    displayName: Checkout code
  - bash: |
      if [[ "$APIGEE_ENVIRONMENT" != *"sandbox"* ]]; then
        make install-node
        npm run test --workspace packages/bdd-tests
      fi
    displayName: Run bdd tests
    condition: and(succeeded(), eq(variables['run_smoke_tests'], 'true'))
      # Run the regression tests
  - bash: |
      poetry run scripts/run_regression_tests.py --env=INTERNAL-DEV --pr_id=$(PR_NUMBER) --user $(GITHUB_USER):$(GITHUB_ACCESS_TOKEN)
    displayName: Trigger regression tests
    condition: and(succeeded(), eq(variables['run_smoke_tests'], 'true'))
