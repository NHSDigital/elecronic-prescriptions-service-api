parameters:
  - name: service_name
    type: string
  - name: short_service_name
    type: string
  - name: service_base_path
    type: string
  - name: product_display_name
    type: string
  - name: product_description
    type: string
  - name: service_base_path_pr
    type: string
  - name: spec_file
    type: string
  - name: apigee_deployments
    type: object
  - name: enable_monitoring
    type: boolean
  - name: enable_status_monitoring
    type: boolean
  - name: jinja_templates
    type: object

extends:
  template: azure/common/apigee-deployment.yml@common
  parameters:
    service_name: ${{ parameters.service_name }}
    short_service_name: ${{ parameters.short_service_name }}
    service_base_path: ${{ parameters.service_base_path }}
    product_display_name: ${{ parameters.product_display_name }}
    product_description: ${{ parameters.product_description }}
    spec_file: ${{ parameters.spec_file }}
    enable_monitoring: ${{ parameters.enable_monitoring }}
    enable_status_monitoring: ${{ parameters.enable_status_monitoring }}
    apigee_deployments: ${{ parameters.apigee_deployments }}
    jinja_templates: ${{ parameters.jinja_templates }}
    prod_requires_approval: false
    post_deploy:
      - bash: |
          if [ "$(APIGEE_ENVIRONMENT)" == "prod" ]
          then
            echo "##vso[task.setvariable variable=run_smoke_tests]false"
          elif [[ -d "$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)/pact" ]]
          then
            echo "##vso[task.setvariable variable=run_smoke_tests]true"
          else
            echo "##vso[task.setvariable variable=run_smoke_tests]false"
          fi
        displayName: Check for smoke tests
      - task: DockerInstaller@0
        displayName: Install docker
        inputs:
          dockerVersion: 17.09.0-ce
          releaseType: stable
        condition: and(succeeded(), eq(variables['run_smoke_tests'], 'true'))
      - task: DownloadSecureFile@1
        displayName: 'Download int signing cert'
        name: eps_int_cert
        inputs:
          secureFile: 'eps_int_test_certificate.crt'
      - task: DownloadSecureFile@1
        displayName: 'Download int signing key'
        name: eps_int_private_key
        inputs:
          secureFile: 'eps_int_test_private.key'
      - bash: |
          #!/bin/bash

          set -euo pipefail

          SERVICE_ARTIFACT_NAME=$(SERVICE_ARTIFACT_NAME)
          export SERVICE_ARTIFACT_NAME

          SERVICE_BASE_PATH=$(SERVICE_BASE_PATH)
          export SERVICE_BASE_PATH

          APIGEE_ENVIRONMENT=$(APIGEE_ENVIRONMENT)
          export APIGEE_ENVIRONMENT

          if [[ $SERVICE_ARTIFACT_NAME == v* ]]; then
              PACT_VERSION=$STAGE_NAME
              export PACT_VERSION
          else
              export PACT_VERSION="$SERVICE_BASE_PATH"
          fi

          PACT_BROKER_URL=$(PACT_BROKER_URL)
          export PACT_BROKER_URL

          PACT_BROKER_BASIC_AUTH_USERNAME=$(PACT_BROKER_BASIC_AUTH_USERNAME)
          export PACT_BROKER_BASIC_AUTH_USERNAME

          PACT_BROKER_BASIC_AUTH_PASSWORD=$(PACT_BROKER_BASIC_AUTH_PASSWORD)
          export PACT_BROKER_BASIC_AUTH_PASSWORD

          PACT_BROKER_NEXT_URL=$(PACT_BROKER_NEXT_URL)
          export PACT_BROKER_NEXT_URL

          PACT_BROKER_NEXT_TOKEN=$(PACT_BROKER_NEXT_TOKEN)
          export PACT_BROKER_NEXT_TOKEN

          export PACT_PROVIDER_URL=https://$APIGEE_ENVIRONMENT.api.service.nhs.uk/$SERVICE_BASE_PATH

          if [[ "$APIGEE_ENVIRONMENT" == *"sandbox"* ]]; then
              export PACT_CONSUMER=nhsd-apim-eps-test-client-sandbox
              export PACT_PROVIDER=nhsd-apim-eps-sandbox
          else
              export PACT_CONSUMER=nhsd-apim-eps-test-client
              export PACT_PROVIDER=nhsd-apim-eps

              export SIGNING_PRIVATE_KEY_PATH=$(eps_int_private_key.secureFilePath)
              export SIGNING_CERT_PATH=$(eps_int_cert.secureFilePath)

              if [ "$APIGEE_ENVIRONMENT" == "int" ]
              then
                  export IDP_URL="https://nhsd-apim-testing-$APIGEE_ENVIRONMENT-ns.herokuapp.com"
                  docker pull artronics/nhsd-login-docker:latest > /dev/null
                  APIGEE_ACCESS_TOKEN=$(docker run --rm artronics/nhsd-login-docker:latest "$IDP_URL")
                  export APIGEE_ACCESS_TOKEN
              elif [ "$APIGEE_ENVIRONMENT" == "ref" ]
              then
                  IDP_URL="$(REF_IDP_URL)"
                  export IDP_URL
                  REF_CLIENT_ID="$(REF_CLIENT_ID)"
                  export REF_CLIENT_ID
                  REF_CLIENT_SECRET="$(REF_CLIENT_SECRET)"
                  export REF_CLIENT_SECRET
                  docker pull booshi/nhsd-login-docker:latest > /dev/null
                  APIGEE_ACCESS_TOKEN=$(
                      docker run --rm \
                          --env CLIENT_ID="$REF_CLIENT_ID" \
                          --env CLIENT_SECRET="$REF_CLIENT_SECRET" \
                          booshi/nhsd-login-docker:latest \
                          "$IDP_URL"
                  )
                  export APIGEE_ACCESS_TOKEN
              else
                  IDP_URL="https://nhsd-apim-testing-$APIGEE_ENVIRONMENT.herokuapp.com"
                  export IDP_URL
                  docker pull artronics/nhsd-login-docker:latest > /dev/null
                  APIGEE_ACCESS_TOKEN=$(docker run --rm artronics/nhsd-login-docker:latest "$IDP_URL")
                  export APIGEE_ACCESS_TOKEN
              fi
          fi

          # Publish
          cd "$SERVICE_NAME/$SERVICE_ARTIFACT_NAME/pact"
          rm -rf node_modules && npm ci > /dev/null
          make create-pacts > /dev/null
          chmod +x ./broker/publish.ts
          make publish-pacts > /dev/null

          # Poll deploying API until our deployed version matches the release version
          if [ "$APIGEE_ENVIRONMENT" != "prod" ]; then
              envPrefix="$APIGEE_ENVIRONMENT."
          fi;
          url="https://${envPrefix}api.service.nhs.uk/$SERVICE_BASE_PATH/_status"
          interval_in_seconds=5
          releaseCommit="$(Build.SourceVersion)"
          printf "\nPolling %s every %s seconds, until commit is: %s\n" "$url" "$interval_in_seconds" "$releaseCommit"
          attempts=0
          success=0
          until [ $attempts -eq 60 ]
          do
          responseData=$(curl -H "apiKey: $(status-endpoint-api-key)" "$url" -s)
          deployedCommit=$(echo "$responseData" | jq -r ".commitId")
          dependenciesUp=$(echo "$responseData" | jq -r ".status")
          if [ "$deployedCommit" == "$releaseCommit" ] && [ "$dependenciesUp" == "pass" ]; then
              success=1
              break;
          fi;
          ((attempts=attempts+1))
          sleep $interval_in_seconds;
          done

          if [ $success == 0 ]
          then
              echo "Smoke tests failed, API was not ready in time"
              exit 255
          fi

          # Verify
          chmod +x ./broker/verify.ts
          make verify-pacts

          # Cleanup for PRs
          if [[ $SERVICE_ARTIFACT_NAME != v* ]]
          then
            curl -X DELETE -u $PACT_BROKER_BASIC_AUTH_USERNAME:$PACT_BROKER_BASIC_AUTH_PASSWORD $PACT_BROKER_URL/pacticipants/$PACT_CONSUMER+$SERVICE_BASE_PATH > /dev/null
          fi
        displayName: Run smoke tests
        condition: and(succeeded(), eq(variables['run_smoke_tests'], 'true'))
      - task: PublishBuildArtifacts@1
        inputs:
          pathToPublish: '$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)/pact/prescriptions-$(APIGEE_ENVIRONMENT).txt'
          artifactName: 'smoke-tests'
          publishLocation: 'Container'
        condition: eq(variables['run_smoke_tests'], 'true')
