parameters:
  - name: service_name
    type: string
  - name: short_service_name
    type: string
  - name: service_base_path
    type: string
  - name: apigee_deployments
    type: object
  - name: enable_monitoring
    type: boolean
  - name: enable_status_monitoring
    type: boolean
  - name: manual_approval_env
    type: string
  - name: jinja_templates
    type: object

extends:
  template: azure/common/apigee-deployment.yml@common
  parameters:
    service_name: ${{ parameters.service_name }}
    short_service_name: ${{ parameters.short_service_name }}
    service_base_path: ${{ parameters.service_base_path }}
    enable_monitoring: ${{ parameters.enable_monitoring }}
    enable_status_monitoring: ${{ parameters.enable_status_monitoring }}
    manual_approval_env: ${{ parameters.manual_approval_env }}
    apigee_deployments: ${{ parameters.apigee_deployments }}
    jinja_templates: ${{ parameters.jinja_templates }}
    prod_requires_approval: true
    prod_producer_approval: true
    post_deploy:
      - bash: |
          if [ "$(APIGEE_ENVIRONMENT)" == "prod" ]
          then
            echo "##vso[task.setvariable variable=run_smoke_tests]false"
          elif [[ -d "$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)/e2e-tests" ]]
          then
            echo "##vso[task.setvariable variable=run_smoke_tests]true"
          else
            echo "##vso[task.setvariable variable=run_smoke_tests]false"
          fi
        displayName: Check for smoke tests
      - bash: |
          if [ "$(APIGEE_ENVIRONMENT)" == "internal-dev" ]
          then
            echo "setting create_release_notes to true"
            echo "##vso[task.setvariable variable=create_release_notes]true"
          else
            echo "setting create_release_notes to false"
            echo "##vso[task.setvariable variable=create_release_notes]false"
          fi
        displayName: Check for create release notes
      - task: NodeTool@0
        displayName: Use Node v16.14.x
        inputs:
         versionSpec: '16.14.x'
        condition: and(succeeded(), eq(variables['run_smoke_tests'], 'true'))
      - task: DownloadSecureFile@1
        displayName: 'Download int signing cert'
        name: eps_int_cert
        inputs:
          secureFile: 'eps_int_test_certificate.crt'
      - task: DownloadSecureFile@1
        displayName: 'Download int signing key'
        name: eps_int_private_key
        inputs:
          secureFile: 'eps_int_test_private.key'
      - bash: |
          #!/bin/bash

          set -euo pipefail

          SERVICE_ARTIFACT_NAME=$(SERVICE_ARTIFACT_NAME)
          export SERVICE_ARTIFACT_NAME

          SERVICE_BASE_PATH=$(SERVICE_BASE_PATH)
          export SERVICE_BASE_PATH

          APIGEE_ENVIRONMENT=$(APIGEE_ENVIRONMENT)
          export APIGEE_ENVIRONMENT

          # Poll deploying API until our deployed version matches the release version
          if [ "$APIGEE_ENVIRONMENT" != "prod" ]; then
              envPrefix="$APIGEE_ENVIRONMENT."
          fi;
          url="https://${envPrefix}api.service.nhs.uk/$SERVICE_BASE_PATH/_status"
          interval_in_seconds=5
          releaseCommit="$(Build.SourceVersion)"
          printf "\nPolling %s every %s seconds, until commit is: %s\n" "$url" "$interval_in_seconds" "$releaseCommit"
          attempts=0
          success=0
          until [ $attempts -eq 60 ]
          do
          echo "attempt: ${attempts}"
          responseData=$(curl -H "apiKey: $(status-endpoint-api-key)" "$url" -s)
          deployedCommit=$(echo "$responseData" | jq -r ".commitId" || echo "not_found")
          dependenciesUp=$(echo "$responseData" | jq -r ".status" || echo "not_found")
          if [ "$deployedCommit" == "$releaseCommit" ] && [ "$dependenciesUp" == "pass" ]; then
              success=1
              break;
          fi;
          ((attempts=attempts+1))
          echo "sleeping ${interval_in_seconds} seconds"
          sleep $interval_in_seconds;
          done

          if [ $success == 0 ]
          then
              echo "Smoke tests failed, API was not ready in time"
              exit 255
          fi

          if [[ $SERVICE_ARTIFACT_NAME == v* ]]; then
              PACT_VERSION=$STAGE_NAME
              export PACT_VERSION
          else
              export PACT_VERSION="$SERVICE_BASE_PATH"
          fi

          PACT_BROKER_URL=$(PACT_BROKER_URL)
          export PACT_BROKER_URL

          PACT_BROKER_BASIC_AUTH_USERNAME=$(PACT_BROKER_BASIC_AUTH_USERNAME)
          export PACT_BROKER_BASIC_AUTH_USERNAME

          PACT_BROKER_BASIC_AUTH_PASSWORD=$(PACT_BROKER_BASIC_AUTH_PASSWORD)
          export PACT_BROKER_BASIC_AUTH_PASSWORD

          PACT_BROKER_NEXT_URL=$(PACT_BROKER_NEXT_URL)
          export PACT_BROKER_NEXT_URL

          PACT_BROKER_NEXT_TOKEN=$(PACT_BROKER_NEXT_TOKEN)
          export PACT_BROKER_NEXT_TOKEN

          export PACT_PROVIDER_URL=https://$APIGEE_ENVIRONMENT.api.service.nhs.uk/$SERVICE_BASE_PATH

          # Install dependencies for Pact tests
          echo "Installing npm packages..."
          cd "$SERVICE_NAME/$SERVICE_ARTIFACT_NAME/e2e-tests/src"
          rm -rf node_modules && npm ci > /dev/null

          if [[ "$APIGEE_ENVIRONMENT" == *"sandbox"* ]]; then
              export PACT_CONSUMER=nhsd-apim-eps-test-client-sandbox
              export PACT_PROVIDER=nhsd-apim-eps-sandbox
          else
              export PACT_CONSUMER=nhsd-apim-eps-test-client
              export PACT_PROVIDER=nhsd-apim-eps

              export SIGNING_PRIVATE_KEY_PATH=$(eps_int_private_key.secureFilePath)
              export SIGNING_CERT_PATH=$(eps_int_cert.secureFilePath)

              if [[ "$APIGEE_ENVIRONMENT" == *"internal-dev"* ]]; then
                API_CLIENT_ID=$(INTERNAL_DEV_CLIENT_ID)
                API_CLIENT_SECRET=$(INTERNAL_DEV_CLIENT_SECRET)
              elif [[ "$APIGEE_ENVIRONMENT" == *"internal-qa"* ]]; then
                API_CLIENT_ID=$(INTERNAL_QA_CLIENT_ID)
                API_CLIENT_SECRET=$(INTERNAL_QA_CLIENT_SECRET)
              elif [[ "$APIGEE_ENVIRONMENT" == *"int"* ]]; then
                API_CLIENT_ID=$(INT_CLIENT_ID)
                API_CLIENT_SECRET=$(INT_CLIENT_SECRET)
              elif [[ "$APIGEE_ENVIRONMENT" == *"ref"* ]]; then
                API_CLIENT_ID=$(REF_CLIENT_ID)
                API_CLIENT_SECRET=$(REF_CLIENT_SECRET)
              fi

              export API_CLIENT_ID
              export API_CLIENT_SECRET

              echo "Fetching Apigee access token..."
              export APIGEE_ACCESS_TOKEN=$(npm run --silent fetch-apigee-access-token)
          fi

          # Publish
          make create-pacts > /dev/null
          chmod +x ./broker/publish.ts
          make publish-pacts > /dev/null

          # Verify
          chmod +x ./broker/verify.ts
          make verify-pacts

          # Cleanup for PRs
          if [[ $SERVICE_ARTIFACT_NAME != v* ]]
          then
            curl -X DELETE -u $PACT_BROKER_BASIC_AUTH_USERNAME:$PACT_BROKER_BASIC_AUTH_PASSWORD $PACT_BROKER_URL/pacticipants/$PACT_CONSUMER+$SERVICE_BASE_PATH > /dev/null
          fi
        displayName: Run smoke tests
        condition: and(succeeded(), eq(variables['run_smoke_tests'], 'true'))
      - task: PublishBuildArtifacts@1
        inputs:
          pathToPublish: '$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)/e2e-tests/src/prescriptions-$(APIGEE_ENVIRONMENT).txt'
          artifactName: 'smoke-tests'
          publishLocation: 'Container'
        condition: eq(variables['run_smoke_tests'], 'true')
      - task: PublishTestResults@2
        displayName: 'Publish Test Results'
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: "**/junit.xml"
          searchFolder: "${{ variables.service_name }}"
          mergeTestResults: true
          testRunTitle: 'EPS Tests'
          failTaskOnFailedTests: true
      - bash: |
          cd "$SERVICE_NAME/$SERVICE_ARTIFACT_NAME"
          mkdir -p release_notes
          pwd
          ls
          make install-python
          make create-int-release-notes > release_notes/int_release_notes.txt
          make create-prod-release-notes > release_notes/prod_release_notes.txt
        displayName: Create release notes
        condition: and(succeeded(), eq(variables['create_release_notes'], 'true'))
      - task: PublishBuildArtifacts@1
        inputs:
          pathToPublish: '$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)/release_notes'
          artifactName: 'release_notes'
          publishLocation: 'Container'
        displayName: Upload release notes
        condition: and(succeeded(), eq(variables['create_release_notes'], 'true'))

