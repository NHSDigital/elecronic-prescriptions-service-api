name: "$(SourceBranchName)+$(BuildID)"

trigger:
  branches:
    include:
      - tags/refs/v*
  tags:
    include:
      - v*

pr:
  branches:
    include: ['*']

resources:
  repositories:
    - repository: common
      type: github
      name: NHSDigital/api-management-utils
      ref: refs/heads/edge
      endpoint: NHSDigital

variables:
  - template: project.yml

extends:
  template: azure/common/apigee-build.yml@common
  parameters:
    service_name: ${{ variables.service_name }}
    short_service_name: ${{ variables.short_service_name }}
    cache_steps:
      - task: DownloadGitHubRelease@0
        displayName: Download Validator
        inputs:
          connection: NHSDigital
          userRepository: NHSDigital/validation-service-fhir-r4
          itemPattern: '**'
          defaultVersionType: specificTag
          version: v1.0.99-alpha
          downloadPath: "validator"
      - task: NodeTool@0
        displayName: Use Node v16.14.x
        inputs:
         versionSpec: '16.14.x'
    test_steps:
      - bash: "make test"
        displayName: Run Quality Checks
        workingDirectory: "${{ variables.service_name }}"
      - task: PublishTestResults@2
        displayName: 'Publish Test Results'
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: "**/junit.xml"
          searchFolder: "${{ variables.service_name }}"
          mergeTestResults: true
          testRunTitle: 'EPS Tests'
          failTaskOnFailedTests: true
      - bash: "make coverage"
        displayName: Run Code Coverage
        workingDirectory: "${{ variables.service_name }}"
      - task: PublishCodeCoverageResults@1
        displayName: 'Publish Code Coverage'
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: "$(Pipeline.Workspace)/s/electronic-prescription-service-api/site/client/coverage/cobertura-coverage.xml"
          pathToSources: "$(Pipeline.Workspace)/s/electronic-prescription-service-api/site/client"
        condition: always()
      - task: UseDotNet@2
        displayName: Use dot net core for publishing coverage results
        inputs:
          version: 6.x
          installationPath: '$(Agent.ToolsDirectory)/dotnet'
      - task: DotNetCoreCLI@2
        displayName: 'Install ReportGenerator'
        inputs:
          command: custom
          custom: tool
          arguments: 'install --global dotnet-reportgenerator-globaltool'
      - task: DotNetCoreCLI@2
        displayName: 'Run unit tests - $(buildConfiguration)'
        inputs:
          command: 'test'
          arguments: '--no-build --configuration $(buildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=$(Build.SourcesDirectory)/TestResults/Coverage/'
          publishTestResults: true
          projects: '**/*.Tests.csproj'
      - script: |
          reportgenerator -reports:$(Build.SourcesDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/CodeCoverage -reporttypes:HtmlInline_AzurePipelines
        displayName: 'Create code coverage report'
