name: "$(SourceBranchName)+$(BuildID)"

trigger:
  branches:
    include:
      - tags/refs/v*
  tags:
    include:
      - v*

pr:
  branches:
    include: ["*"]

resources:
  repositories:
    - repository: common
      type: github
      name: NHSDigital/api-management-utils
      ref: refs/heads/edge
      endpoint: NHSDigital

variables:
  - template: project.yml

extends:
  template: azure/common/apigee-build.yml@common
  parameters:
    service_name: ${{ variables.service_name }}
    short_service_name: ${{ variables.short_service_name }}
    cache_steps:
      - task: DownloadGitHubRelease@0
        displayName: Download Validator
        inputs:
          connection: NHSDigital
          userRepository: NHSDigital/validation-service-fhir-r4
          itemPattern: "**"
          defaultVersionType: specificTag
          version: v1.0.187-alpha
          downloadPath: "validator"
      - task: NodeTool@0
        displayName: Use Node v20.10.0
        inputs:
          versionSpec: "20.10.0"
      - task: UseDotNet@2
        inputs:
          version: "3.1.x"
      - bash: "make prepare-for-api-release"
        displayName: Prepare for api release
        workingDirectory: "${{ variables.service_name }}"
      - bash: "make download-openjdk"
        displayName: Download OpenJDK
        workingDirectory: "${{ variables.service_name }}"
      - task: JavaToolInstaller@0
        displayName: Install JRE & JDK v8 x64
        inputs:
          versionSpec: "8"
          jdkArchitectureOption: "x64"
          jdkSourceOption: "LocalDirectory"
          jdkFile: "/tmp/openjdk.tar.gz"
          jdkDestinationDirectory: "/tmp/openjdk"
    test_steps:
      - bash: "make check-language-versions"
        displayName: Check consistent language version
        workingDirectory: "${{ variables.service_name }}"
      - bash: "make test"
        displayName: Run Quality Checks
        workingDirectory: "${{ variables.service_name }}"
      - task: PublishTestResults@2
        displayName: "Publish Test Results"
        inputs:
          testResultsFormat: "JUnit"
          testResultsFiles: "**/junit.xml"
          searchFolder: "${{ variables.service_name }}"
          mergeTestResults: true
          testRunTitle: "EPS Tests"
          failTaskOnFailedTests: true
      - task: PublishCodeCoverageResults@1
        inputs:
          codeCoverageTool: "Cobertura"
          summaryFileLocation: "$(Pipeline.Workspace)/s/electronic-prescription-service-api/packages/coordinator/coverage/cobertura-coverage.xml"
          pathToSources: "$(Pipeline.Workspace)/s/electronic-prescription-service-api/packages/coordinator/"
        condition: always()
