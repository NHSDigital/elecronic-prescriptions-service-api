name: "$(SourceBranchName)+$(BuildID)"

trigger: none
pr: none

resources:
  repositories:
    - repository: common
      type: github
      name: NHSDigital/api-management-utils
      ref: refs/heads/edge
      endpoint: NHSDigital
  pipelines:
  - pipeline: build_pipeline
    source: "EPS-API-Tool-Build"
    trigger:
      branches:
        exclude:
          - master
          - refs/heads/master
          - refs/tags/v*

pool:
  name: 'AWS-ECS'

variables:
  - template: project.yml

extends:
  template: azure/common/apigee-deployment.yml@common
  parameters:
    service_name: ${{ variables.service_name }}
    short_service_name: ${{ variables.short_service_name }}
    service_base_path: ${{ variables.service_base_path }}
    product_display_name: ${{ variables.product_display_name }}
    product_description: ${{ variables.product_description }}
    spec_file: ${{ variables.spec_file }}
    apigee_deployments:
      - environment: internal-dev
        make_spec_visible: false
    post_deploy:
      - bash: |
          #!/bin/bash

          set -euo pipefail

          export SERVICE_BASE_PATH=$(SERVICE_BASE_PATH)
          export APIGEE_ENVIRONMENT=$(APIGEE_ENVIRONMENT)

          # Poll deploying API until our deployed version matches the release version
          if [ "$APIGEE_ENVIRONMENT" != "prod" ]; then
              envPrefix="$APIGEE_ENVIRONMENT."
          fi;
          url="https://${envPrefix}api.service.nhs.uk/$SERVICE_BASE_PATH/_status"
          interval_in_seconds=5
          releaseCommit="$(Build.SourceVersion)"
          printf "\nPolling %s every %s seconds, until commit is: %s\n" "$url" "$interval_in_seconds" "$releaseCommit"
          attempts=0
          success=0
          until [ $attempts -eq 60 ]
          do
          responseData=$(curl -H "apiKey: $(status-endpoint-api-key)" "$url" -s)
          deployedCommit=$(echo "$responseData" | jq -r ".commitId")
          dependenciesUp=$(echo "$responseData" | jq -r ".status")
          if [ "$deployedCommit" == "$releaseCommit" ] && [ "$dependenciesUp" == "pass" ]; then
              success=1
              break;
          fi;
          ((attempts=attempts+1))
          sleep $interval_in_seconds;
          done

          if [ $success == 0 ]
          then
              echo "Failed to verify if EPS API has been succesfully deployed: API was not ready in time"
              exit 255
          fi
        displayName: Wait for EPS deploy
