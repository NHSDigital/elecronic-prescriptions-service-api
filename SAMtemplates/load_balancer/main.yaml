AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: |
  Main template for Load Balancer with all resources included

Parameters:
  StackName:
    Type: String

  EnableMutualTLS:
    Type: String
    Default: false

  TruststoreVersion:
    Type: String
    Default: none

  TruststoreFile:
    Type: String
    Default: none

  VPC:
    Type: AWS::EC2::VPC::Id

  SubnetA:
    Type: AWS::EC2::Subnet::Id

  SubnetB:
    Type: AWS::EC2::Subnet::Id

  SubnetC:
    Type: AWS::EC2::Subnet::Id

  # LoadBalancerPort:
  #   Type: Number
  #   Default: 443

  VersionNumber:
    Type: String
    Default: "xxx"

  CommitId:
    Type: String
    Default: "xxx"

  DomainNameExport:
    Type: String
    Description: The domain name to be used for the certificate
    Default: "eps-route53-resources:EPS-domain"

  ZoneIDExport:
    Type: String
    Description: The hosted zone ID for the domain
    Default: "eps-route53-resources:EPS-ZoneID"

  HostedZoneName:
    Type: String
    Default: "eps-route53-resources:EPS-domain"

  # LoadBalancerSecurityGroup:
  #   Type: AWS::EC2::SecurityGroup::Id
  #   Description: The security group for the load balancer

Resources:
  # LoadBalancerSecurityGroup:
  #   Type: AWS::EC2::SecurityGroup
  #   Properties:
  #     GroupDescription: Security group for the load balancer
  #     VpcId: !Ref VPC
  #     SecurityGroupIngress:
  #       - IpProtocol: tcp
  #         FromPort: !Ref LoadBalancerPort
  #         ToPort: !Ref LoadBalancerPort
  #         CidrIp: 0.0.0.0/0

  GenerateCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      ValidationMethod: DNS
      DomainName:
        Fn::Join:
          - "."
          - - !Ref StackName
            - Fn::ImportValue: !Ref DomainNameExport
      DomainValidationOptions:
        - DomainName:
            Fn::Join:
              - "."
              - - !Ref StackName
                - Fn::ImportValue: !Ref DomainNameExport
          HostedZoneId: !ImportValue eps-route53-resources:EPS-ZoneID

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: 60
      Scheme: internet-facing
      # SecurityGroups:
      #   - !Ref LoadBalancerSecurityGroup
      Subnets:
        - !Ref SubnetA
        - !Ref SubnetB
        - !Ref SubnetC

  ListenerHTTPS:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref GenerateCertificate
      SslPolicy: ELBSecurityPolicy-2016-08

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 2
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60
      TargetType: ip
      VpcId: !Ref VPC

  DNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Sub '${HostedZoneName}.'
      Name: !Sub '${StackName}.${HostedZoneName}'
      Type: A
      AliasTarget:
        DNSName: !GetAtt LoadBalancer.DNSName
        HostedZoneId: !ImportValue eps-route53-resources:EPS-ZoneID

Outputs:
  Endpoint:
    Description: Load Balancer Endpoint
    Value: !Sub 'https://${StackName}.${HostedZoneName}'
